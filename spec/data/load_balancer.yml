plugin:
    load_balancer:
        base: meta
        subtypes:
            load_balancer:
                base: terraform
                manifest: load_balancer
                data: load_balancer
            load_balancer_listener:
                base: terraform
                manifest: load_balancer_listener
                data: load_balancer_listener

data_mixins:
    load_balancer:
        class: LoadBalancerMixin
        fields:
            load_balancer:
                type: "@django.ForeignKey"
                relation: load_balancer
                options:
                    "null": true
                    on_delete: "@django.PROTECT"
                    editable: false

    load_balancer_relation:
        class: LoadBalancerRelationMixin
        fields:
            load_balancers:
                type: "@django.ManyToManyField"
                relation: load_balancer

    load_balancer_listener:
        class: LoadBalancerListenerMixin
        fields:
            load_balancer_listener:
                type: "@django.ForeignKey"
                relation: load_balancer_listener
                options:
                    "null": true
                    on_delete: "@django.PROTECT"
                    editable: false

    load_balancer_listener_relation:
        class: LoadBalancerListenerRelationMixin
        fields:
            load_balancer_listeners:
                type: "@django.ManyToManyField"
                relation: load_balancer_listener

data_base:
    load_balancer:
        class: LoadBalancerBase
        base: resource
        mixins: [load_balancer]
        id_fields: [name, load_balancer_id]
        meta:
            unique_together: [load_balancer, name]
            scope: load_balancer

    load_balancer_listener:
        class: LoadBalancerListenerBase
        base: resource
        mixins: [load_balancer_listener]
        id_fields: [name, load_balancer_listener_id]
        meta:
            unique_together: [load_balancer_listener, name]
            scope: load_balancer_listener

data:
    load_balancer:
        class: LoadBalancer
        base: network
        mixins: [provider, group, domain, subnet_relation, firewall_relation]
        roles:
            edit: [server_admin]
            view: [server_auditor]
        fields:
            internal:
                type: "@django.BooleanField"
                options:
                    default: false
        meta:
            relation: domain
            provider_name: "load_balancer:load_balancer"
            command_base: lb

    load_balancer_listener:
        class: LoadBalancerListener
        base: load_balancer
        mixins: [provider, certificate]
        roles:
            edit: [server_admin]
            view: [server_auditor]
        fields:
            port:
                type: "@django.IntegerField"
                options:
                    "null": true
            target_port:
                type: "@django.IntegerField"
                options:
                    "null": true
            health_check_path:
                type: "@django.CharField"
                options:
                    max_length: 255
                    default: "/"
            health_check_interval:
                type: "@django.IntegerField"
                options:
                    default: 30
            health_check_timeout:
                type: "@django.IntegerField"
                options:
                    default: 10
            healthy_status:
                type: "@fields.CSVField"
                options:
                    default: "200"
            healthy_threshold:
                type: "@django.IntegerField"
                options:
                    default: 3
            unhealthy_threshold:
                type: "@django.IntegerField"
                options:
                    default: 3
            server_groups:
                type: "@fields.CSVField"
                options:
                    "null": true
        meta:
            ordering: [name]
            relation: certificate
            dynamic_fields: [servers]
            provider_name: "load_balancer:load_balancer_listener"
            provider_relation: load_balancer
            command_base: "lb listener"

command_mixins:
    load_balancer:
        class: LoadBalancerMixin
        meta:
            load_balancer:
                data: load_balancer
                provider: true
                priority: 2
            load_balancer_listener:
                data: load_balancer_listener
                priority: 3

command_base:
    load_balancer:
        base: network
        mixins: [domain, certificate, load_balancer, firewall]
        server_enabled: true
        groups_allowed: [server-admin, network-admin]

command:
    lb:
        resource: load_balancer
        base_name: load_balancer
        base: load_balancer
        priority: 84

        listener:
            resource: load_balancer_listener
            base_name: load_balancer_listener
            base: load_balancer
            priority: 1
